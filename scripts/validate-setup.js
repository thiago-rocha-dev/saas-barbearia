#!/usr/bin/env node

/**
 * BARBERPRO - VALIDA√á√ÉO DO SETUP
 * 
 * Este script valida se o sistema est√° configurado corretamente
 * e se todos os componentes est√£o funcionando.
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase (apenas chave p√∫blica)
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Erro: Vari√°veis de ambiente b√°sicas n√£o configuradas!');
    console.error('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas no .env');
    process.exit(1);
}

// Cliente p√∫blico do Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

/**
 * Fun√ß√£o para testar conex√£o com o banco
 */
async function testConnection() {
    try {
        console.log('üîÑ Testando conex√£o com Supabase...');
        
        const { data, error } = await supabase
            .from('barbershops')
            .select('id, name')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Erro na conex√£o:', error.message);
            return false;
        }
        
        console.log('‚úÖ Conex√£o com Supabase OK');
        if (data && data.length > 0) {
            console.log(`   ‚Ä¢ Barbearia encontrada: ${data[0].name}`);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro na conex√£o:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o para verificar tabelas
 */
async function checkTables() {
    console.log('\nüîç Verificando estrutura do banco...');
    
    const tables = [
        { name: 'barbershops', description: 'Barbearias' },
        { name: 'services', description: 'Servi√ßos' },
        { name: 'profiles', description: 'Perfis de usu√°rio' },
        { name: 'barbers', description: 'Barbeiros' },
        { name: 'appointments', description: 'Agendamentos' }
    ];
    
    let allTablesOk = true;
    
    for (const table of tables) {
        try {
            const { data, error } = await supabase
                .from(table.name)
                .select('*')
                .limit(1);
                
            if (error) {
                console.log(`‚ùå Tabela ${table.name} (${table.description}): ${error.message}`);
                allTablesOk = false;
            } else {
                console.log(`‚úÖ Tabela ${table.name} (${table.description}): OK`);
            }
            
        } catch (error) {
            console.log(`‚ùå Tabela ${table.name}: ${error.message}`);
            allTablesOk = false;
        }
    }
    
    return allTablesOk;
}

/**
 * Fun√ß√£o para verificar dados de seed
 */
async function checkSeedData() {
    console.log('\nüìä Verificando dados de seed...');
    
    try {
        // Verificar barbearias
        const { data: barbershops } = await supabase
            .from('barbershops')
            .select('id, name');
            
        // Verificar servi√ßos
        const { data: services } = await supabase
            .from('services')
            .select('id, name, price');
            
        console.log(`üìã Dados encontrados:`);
        console.log(`   ‚Ä¢ Barbearias: ${barbershops?.length || 0}`);
        console.log(`   ‚Ä¢ Servi√ßos: ${services?.length || 0}`);
        
        if (barbershops?.length > 0) {
            console.log(`   ‚Ä¢ Barbearia principal: ${barbershops[0].name}`);
        }
        
        if (services?.length > 0) {
            console.log(`   ‚Ä¢ Exemplo de servi√ßo: ${services[0].name} - R$ ${services[0].price}`);
        }
        
        return (barbershops?.length || 0) > 0 && (services?.length || 0) > 0;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar dados:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o para verificar usu√°rios de teste
 */
async function checkTestUsers() {
    console.log('\nüë• Verificando usu√°rios de teste...');
    
    try {
        const { data: profiles } = await supabase
            .from('profiles')
            .select('email, role, full_name')
            .in('email', ['admin@barberpro.com', 'barbeiro@barberpro.com', 'cliente@barberpro.com']);
            
        console.log(`üìã Usu√°rios de teste encontrados: ${profiles?.length || 0}/3`);
        
        if (profiles && profiles.length > 0) {
            profiles.forEach(profile => {
                console.log(`   ‚Ä¢ ${profile.email} - ${profile.role} - ${profile.full_name}`);
            });
        } else {
            console.log('‚ö†Ô∏è  Nenhum usu√°rio de teste encontrado');
            console.log('   Execute: npm run seed:users (ap√≥s configurar SERVICE_ROLE_KEY)');
        }
        
        return (profiles?.length || 0) === 3;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar usu√°rios:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o para verificar configura√ß√£o do ambiente
 */
function checkEnvironment() {
    console.log('üîß Verificando configura√ß√£o do ambiente...');
    
    const requiredVars = {
        'VITE_SUPABASE_URL': process.env.VITE_SUPABASE_URL,
        'VITE_SUPABASE_ANON_KEY': process.env.VITE_SUPABASE_ANON_KEY,
        'SUPABASE_SERVICE_ROLE_KEY': process.env.SUPABASE_SERVICE_ROLE_KEY
    };
    
    let allConfigured = true;
    
    Object.entries(requiredVars).forEach(([key, value]) => {
        if (value) {
            console.log(`‚úÖ ${key}: Configurado`);
        } else {
            console.log(`‚ùå ${key}: N√£o configurado`);
            if (key === 'SUPABASE_SERVICE_ROLE_KEY') {
                console.log('   (Necess√°rio apenas para scripts de seed/reset)');
            } else {
                allConfigured = false;
            }
        }
    });
    
    return allConfigured;
}

/**
 * Fun√ß√£o principal
 */
async function main() {
    console.log('üöÄ BARBERPRO - Valida√ß√£o do Setup\n');
    
    // Verificar ambiente
    const envOk = checkEnvironment();
    
    if (!envOk) {
        console.log('\n‚ùå Configura√ß√£o do ambiente incompleta!');
        console.log('Verifique o arquivo .env e configure as vari√°veis necess√°rias.');
        return;
    }
    
    // Testar conex√£o
    const connectionOk = await testConnection();
    
    if (!connectionOk) {
        console.log('\n‚ùå N√£o foi poss√≠vel conectar ao Supabase!');
        console.log('Verifique as credenciais no arquivo .env');
        return;
    }
    
    // Verificar tabelas
    const tablesOk = await checkTables();
    
    // Verificar dados de seed
    const seedDataOk = await checkSeedData();
    
    // Verificar usu√°rios de teste
    const usersOk = await checkTestUsers();
    
    // Resumo final
    console.log('\nüìä RESUMO DA VALIDA√á√ÉO:');
    console.log(`   ‚Ä¢ Ambiente: ${envOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Conex√£o: ${connectionOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Tabelas: ${tablesOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Dados b√°sicos: ${seedDataOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Usu√°rios de teste: ${usersOk ? '‚úÖ' : '‚ùå'}`);
    
    if (connectionOk && tablesOk && seedDataOk) {
        if (usersOk) {
            console.log('\nüéâ Sistema totalmente configurado e pronto para uso!');
            console.log('\nüåê Acesse: http://localhost:5173');
            console.log('\nüîë Credenciais de teste:');
            console.log('   ‚Ä¢ admin@barberpro.com / admin123');
            console.log('   ‚Ä¢ barbeiro@barberpro.com / barber123');
            console.log('   ‚Ä¢ cliente@barberpro.com / client123');
        } else {
            console.log('\n‚ö†Ô∏è  Sistema configurado, mas usu√°rios de teste n√£o encontrados.');
            console.log('\nüîß Para criar usu√°rios de teste:');
            console.log('   1. Configure SUPABASE_SERVICE_ROLE_KEY no .env');
            console.log('   2. Execute: npm run seed:users');
        }
    } else {
        console.log('\n‚ùå Sistema n√£o est√° totalmente configurado.');
        console.log('\nüîß Pr√≥ximos passos:');
        if (!tablesOk || !seedDataOk) {
            console.log('   1. Execute auto-setup-complete.sql no Supabase SQL Editor');
        }
        if (!usersOk) {
            console.log('   2. Configure SERVICE_ROLE_KEY e execute: npm run seed:users');
        }
    }
}

// Executar valida√ß√£o
main().catch(error => {
    console.error('‚ùå Erro fatal:', error.message);
    process.exit(1);
});

export { testConnection, checkTables, checkSeedData, checkTestUsers };