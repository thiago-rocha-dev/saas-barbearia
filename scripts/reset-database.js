#!/usr/bin/env node

/**
 * BARBERPRO - SCRIPT DE RESET COMPLETO
 * 
 * Este script limpa TODOS os dados do banco e usu√°rios do Auth,
 * permitindo recome√ßar do zero. Use com cuidado!
 * 
 * Funcionalidades:
 * - Remove todos os usu√°rios do Supabase Auth
 * - Limpa todas as tabelas do banco
 * - Reseta o sistema para estado inicial
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase com chave de servi√ßo (administrativa)
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas!');
    console.error('Certifique-se de que VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas no .env');
    process.exit(1);
}

// Cliente administrativo do Supabase
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

// Emails dos usu√°rios de teste para remover
const testUserEmails = [
    'admin@barberpro.com',
    'barbeiro@barberpro.com',
    'cliente@barberpro.com'
];

/**
 * Fun√ß√£o para confirmar a a√ß√£o de reset
 */
function confirmReset() {
    const args = process.argv.slice(2);
    
    if (!args.includes('--confirm')) {
        console.log('üö® ATEN√á√ÉO: Este script ir√° DELETAR TODOS os dados!');
        console.log('\nüìã O que ser√° removido:');
        console.log('   ‚Ä¢ Todos os usu√°rios de teste do Auth');
        console.log('   ‚Ä¢ Todos os agendamentos');
        console.log('   ‚Ä¢ Todos os perfis de usu√°rio');
        console.log('   ‚Ä¢ Todos os barbeiros');
        console.log('   ‚Ä¢ Dados de barbearias e servi√ßos');
        console.log('\n‚ö†Ô∏è  Esta a√ß√£o √© IRREVERS√çVEL!');
        console.log('\nüîÑ Para confirmar, execute:');
        console.log('   npm run reset:database -- --confirm');
        console.log('   ou');
        console.log('   node scripts/reset-database.js --confirm');
        return false;
    }
    
    return true;
}

/**
 * Fun√ß√£o para remover usu√°rios do Auth
 */
async function removeAuthUsers() {
    console.log('üóëÔ∏è  Removendo usu√°rios do Auth...');
    
    try {
        // Listar todos os usu√°rios
        const { data: users, error: listError } = await supabase.auth.admin.listUsers();
        
        if (listError) {
            console.error('‚ùå Erro ao listar usu√°rios:', listError.message);
            return false;
        }
        
        // Filtrar usu√°rios de teste
        const testUsers = users.users.filter(user => 
            testUserEmails.includes(user.email)
        );
        
        console.log(`üìã Encontrados ${testUsers.length} usu√°rios de teste para remover`);
        
        // Remover cada usu√°rio
        for (const user of testUsers) {
            console.log(`üîÑ Removendo: ${user.email}`);
            
            const { error } = await supabase.auth.admin.deleteUser(user.id);
            
            if (error) {
                console.error(`‚ùå Erro ao remover ${user.email}:`, error.message);
            } else {
                console.log(`‚úÖ Removido: ${user.email}`);
            }
            
            // Pequena pausa
            await new Promise(resolve => setTimeout(resolve, 300));
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao remover usu√°rios:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o para limpar tabelas do banco
 */
async function clearDatabase() {
    console.log('\nüóëÔ∏è  Limpando tabelas do banco...');
    
    const tables = [
        'appointments',
        'barbers', 
        'services',
        'profiles',
        'barbershops'
    ];
    
    try {
        for (const table of tables) {
            console.log(`üîÑ Limpando tabela: ${table}`);
            
            const { error } = await supabase
                .from(table)
                .delete()
                .neq('id', '00000000-0000-0000-0000-000000000000'); // Deletar tudo
                
            if (error) {
                console.error(`‚ùå Erro ao limpar ${table}:`, error.message);
            } else {
                console.log(`‚úÖ Tabela ${table} limpa`);
            }
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar banco:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o para verificar se o reset foi bem-sucedido
 */
async function verifyReset() {
    console.log('\nüîç Verificando reset...');
    
    try {
        // Verificar usu√°rios Auth
        const { data: users } = await supabase.auth.admin.listUsers();
        const remainingTestUsers = users.users.filter(user => 
            testUserEmails.includes(user.email)
        );
        
        // Verificar tabelas
        const { data: profiles } = await supabase.from('profiles').select('id');
        const { data: appointments } = await supabase.from('appointments').select('id');
        
        console.log('üìä Status ap√≥s reset:');
        console.log(`   ‚Ä¢ Usu√°rios de teste restantes: ${remainingTestUsers.length}`);
        console.log(`   ‚Ä¢ Perfis no banco: ${profiles?.length || 0}`);
        console.log(`   ‚Ä¢ Agendamentos no banco: ${appointments?.length || 0}`);
        
        const success = remainingTestUsers.length === 0 && 
                       (profiles?.length || 0) === 0 && 
                       (appointments?.length || 0) === 0;
        
        if (success) {
            console.log('\n‚úÖ Reset completo realizado com sucesso!');
            console.log('\nüöÄ Pr√≥ximos passos:');
            console.log('   1. Execute: npm run setup:database');
            console.log('   2. Execute: npm run seed:users');
            console.log('   3. Sistema estar√° pronto para uso');
        } else {
            console.log('\n‚ö†Ô∏è  Reset parcial. Alguns dados podem ter permanecido.');
        }
        
        return success;
        
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
    console.log('üîÑ BARBERPRO - Reset Completo do Sistema\n');
    
    // Confirmar a√ß√£o
    if (!confirmReset()) {
        return;
    }
    
    console.log('\nüö® Iniciando reset completo...');
    
    // Remover usu√°rios do Auth
    const authSuccess = await removeAuthUsers();
    
    // Limpar banco de dados
    const dbSuccess = await clearDatabase();
    
    // Aguardar processamento
    console.log('\n‚è≥ Aguardando processamento...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Verificar resultado
    const verifySuccess = await verifyReset();
    
    if (authSuccess && dbSuccess && verifySuccess) {
        console.log('\nüéâ Sistema resetado com sucesso!');
        console.log('Agora voc√™ pode executar o setup completo novamente.');
    } else {
        console.log('\n‚ö†Ô∏è  Reset incompleto. Verifique os logs acima.');
        process.exit(1);
    }
}

// Executar script
main().catch(error => {
    console.error('‚ùå Erro fatal:', error.message);
    process.exit(1);
});

export { removeAuthUsers, clearDatabase, verifyReset };